# use docker image with latex preinstalled
# since there is no official latex image, use https://github.com/blang/latex-docker
# possible alternative: https://github.com/natlownes/docker-latex

stages:
 - build
 - test

# compiles pdflatex/draft & xelatex/draft versions of thesis.tex
template_builder:
  image: listx/texlive:2017
  stage: build
  before_script:
    - cd latex
  script:
    - "latexmk -pdf -output-directory=pdflatex/ thesis.tex"
    - "latexmk -xelatex -output-directory=xelatex/ thesis.tex"
  artifacts:
    paths:
      - "latex/pdflatex/thesis.pdf"
      - "latex/xelatex/thesis.pdf"

template_validator:
  image: listx/texlive:2017
  stage: test
  script:
    - "pdfinfo latex/pdflatex/thesis.pdf |grep '^Pages: *13$'"
    - "pdfinfo latex/xelatex/thesis.pdf |grep '^Pages: *13$'"

# PDF/A build: compiles pdflatex/final version of thesis.tex with pdfx (pdf/a-1b)
pdfa_builder:
  image: listx/texlive:2017
  stage: build
  before_script:
    - cd latex
  script:
    - "sed 's/version=draft/version=final/g' thesis.tex > thesis2.tex"
    - "latexmk -pdf -shell-escape -output-directory=pdfa/ thesis2.tex"
  artifacts:
    paths:
      - "latex/pdfa/thesis2.pdf"

# PDF/A validation: uses a custom build of verapdf. The official release won't work with Java > 7 atm. :-/
pdfa_validator:
  image: openjdk:11
  stage: test
  before_script:
    - "wget https://gitlab.utu.fi/jmjmak/veraPDF-apps/raw/integration/greenfield-apps-1.15.0-SNAPSHOT.jar?inline=false -O validator.jar"
  script:
    - "java -cp validator.jar org.verapdf.apps.GreenfieldCliWrapper --format text -v latex/pdfa/thesis2.pdf|grep '^PASS'"

xelatex_builder:
  image: listx/texlive:2017
  stage: build
  before_script:
    - cd tests
  script:
    - "for i in *.tex; do latexmk -xelatex -output-directory=xelatex/ $i; done"
  artifacts:
    paths:
      - tests/xelatex/test-app1.pdf
      - tests/xelatex/test-app2.pdf
      - tests/xelatex/test-app3.pdf
      - tests/xelatex/test-app4.pdf
      - tests/xelatex/test-app5.pdf
      - tests/xelatex/test-bilingual.pdf
      - tests/xelatex/test-english.pdf
      - tests/xelatex/test-finnish.pdf
      - tests/xelatex/test-hyperref.pdf

pdflatex_builder:
  image: listx/texlive:2017
  stage: build
  before_script:
    - cd tests
  script:
    - "for i in *.tex; do latexmk -pdf -output-directory=pdflatex/ $i; done"
  artifacts:
    paths:
      - tests/pdflatex/test-app1.pdf
      - tests/pdflatex/test-app2.pdf
      - tests/pdflatex/test-app3.pdf
      - tests/pdflatex/test-app4.pdf
      - tests/pdflatex/test-app5.pdf
      - tests/pdflatex/test-bilingual.pdf
      - tests/pdflatex/test-english.pdf
      - tests/pdflatex/test-finnish.pdf
      - tests/pdflatex/test-hyperref.pdf
      
xelatex_content_validator:
  image: listx/texlive:2017
  stage: test
  before_script:
    - cd tests/xelatex
    - "for i in *.pdf; do pdftotext $i; done"
  script:
    - "grep '2 s., 5 liites.' test-app1.txt"
    - "grep '2 s., 3 liites.' test-app2.txt"
    - "grep '2 s., 1 liites.' test-app3.txt"
    - "grep 'TkK -tutkielma, 2 s.$' test-app4.txt"
    - "grep 'TkK -tutkielma, 3 s.$' test-app5.txt"
    - "grep 'TURUN YLIOPISTO' test-finnish.txt"
    - "grep 'TURUN YLIOPISTO' test-bilingual.txt"
    - "grep 'UNIVERSITY OF TURKU' test-bilingual.txt"
    - "grep 'UNIVERSITY OF TURKU' test-english.txt"
    - "pdfinfo test-hyperref.pdf |grep 'LaTeX with hyperref package'"


pdflatex_content_validator:
  image: listx/texlive:2017
  stage: test
  before_script:
    - cd tests/pdflatex
    - "for i in *.pdf; do pdftotext $i; done"
  script:
    - "grep '2 s., 5 liites.' test-app1.txt"
    - "grep '2 s., 3 liites.' test-app2.txt"
    - "grep '2 s., 1 liites.' test-app3.txt"
    - "grep 'TkK -tutkielma, 2 s.$' test-app4.txt"
    - "grep 'TkK -tutkielma, 3 s.$' test-app5.txt"
    - "grep 'TURUN YLIOPISTO' test-finnish.txt"
    - "grep 'TURUN YLIOPISTO' test-bilingual.txt"
    - "grep 'UNIVERSITY OF TURKU' test-bilingual.txt"
    - "grep 'UNIVERSITY OF TURKU' test-english.txt"
    - "pdfinfo test-hyperref.pdf |grep 'LaTeX with hyperref package'"
